/* 1. Создайте множество, в котором будут храниться экземпляры класса Cat - HashSet<Cat>. 
Поместите в него некоторое количество объектов.
2. Создайте 2 или более котов с одинаковыми параметрами в полях. Поместите их во множество. 
Убедитесь, что все они сохранились во множество.
3. Создайте метод public boolean equals(Object o). Пропишите в нём логику сравнения котов 
по параметрам, хранимым в полях. То есть, метод должен возвращать true, только если 
значения во всех полях сравниваемых объектов равны.
4. Выведите снова содержимое множества из пункта 2, убедитесь, что дубликаты удалились.
 */


package Seminar2802;

import java.time.LocalDate;
import java.util.HashSet;
import java.util.Set;

public class task3 {
    public static void main(String[] args) {
        Set<Cat> set = new HashSet<>();            // создали множество.  В нем сравниваются хэекоды
        
        Cat cat1 = new Cat("Барсик", "Рыжий", LocalDate.of(2018, 1, 20));
        Cat cat2 = new Cat("Барсик", "Рыжий", LocalDate.of(2018, 1, 20));
        Cat cat3 = new Cat("Барсик", "Рыжий", LocalDate.of(2018, 1, 20)); 
                                                   // создали три объекта (три кота)
        set.add(cat1);
        set.add(cat2);
        set.add(cat3);           // поместили три объекта (три кота) во множество set.

        System.out.println(set); // [Барсик цвет Рыжий, возраст 5 лет, Барсик цвет Рыжий, возраст 5 лет, Барсик цвет Рыжий, возраст 5 лет]
                                 // вроде три одинаковых элемента. На самом деле это три разных объекта
                                 // после метода hashCode() (см. Cat.java) в множестве Set будет уже 1 объект:
                                 // [Барсик цвет Рыжий, возраст 5 лет]


        System.out.println(cat1.equals(cat2));       // true. А если поменять хоть один параметр, будет false                
    }                            
}
